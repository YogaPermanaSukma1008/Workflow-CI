name: MLflow CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: MLProject/conda.yaml
          activate-environment: ml_env
          auto-activate-base: false
          python-version: "3.12"
          miniconda-version: "latest"
          use-mamba: true

      - name: üß™ Verify Python version
        shell: bash -l {0}
        run: |
          echo "Python version:"
          python --version
          conda list python

      - name: üõ†Ô∏è Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq build-essential tree

      - name: üß∞ Install Python dependencies
        shell: bash -l {0}
        run: |
          pip install --upgrade pip
          pip install mlflow[extras] pytest

      - name: ‚úÖ Run tests
        shell: bash -l {0}
        run: |
          echo "Running pytest..."
          pytest MLProject/tests/ || echo "‚ö†Ô∏è Some tests failed, continuing..."

      - name: üéØ Train model with MLflow
        shell: bash -l {0}
        env:
          MLFLOW_TRACKING_URI: https://dagshub.com/YogaPermanaSukma1008/membangun-model.mlflow
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
        run: |
          echo "Training model..."
          python MLProject/Modelling.py

      - name: üîç Get latest successful run
        id: get_run
        shell: bash
        env:
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
        run: |
          echo "Getting latest successful MLflow run..."
          response=$(curl -s -u "$MLFLOW_TRACKING_USERNAME:$MLFLOW_TRACKING_PASSWORD" \
            "https://dagshub.com/api/v1/YogaPermanaSukma1008/membangun-model.mlflow/mlflow/runs/search" \
            -H "Content-Type: application/json" \
            -d '{
              "filter": "attributes.status = \"FINISHED\"",
              "max_results": 1,
              "order_by": ["attributes.end_time DESC"]
            }')

          run_id=$(echo "$response" | jq -r '.runs[0].info.run_id')
          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "::error::‚ùå No successful MLflow runs found!"
            exit 1
          fi

          echo "‚úÖ Found run_id: $run_id"
          echo "run_id=$run_id" >> $GITHUB_OUTPUT

      - name: üì• Download model artifacts
        shell: bash -l {0}
        env:
          MLFLOW_TRACKING_URI: https://dagshub.com/YogaPermanaSukma1008/membangun-model.mlflow
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
        run: |
          echo "Downloading artifacts for run_id=${{ steps.get_run.outputs.run_id }}"
          mlflow artifacts download \
            --run-id ${{ steps.get_run.outputs.run_id }} \
            --artifact-path model \
            --dst-path ./model_artifacts

      - name: üîé Verify downloaded model
        run: |
          echo "Model artifacts structure:"
          tree ./model_artifacts
          test -f ./model_artifacts/model.pkl || {
            echo "::error::‚ùå model.pkl not found!"
            exit 1
          }

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üèóÔ∏è Build MLflow Docker image
        shell: bash -l {0}
        run: |
          IMAGE_NAME="mlflow-model-${{ github.run_id }}"
          echo "Building Docker image: $IMAGE_NAME"
          mlflow models build-docker \
            -m "runs:/${{ steps.get_run.outputs.run_id }}/model" \
            -n "$IMAGE_NAME" \
            --enable-mlserver

      - name: üì§ Tag and push Docker image
        run: |
          IMAGE_NAME="mlflow-model-${{ github.run_id }}"
          echo "Pushing image: $IMAGE_NAME to Docker Hub"
          docker tag "$IMAGE_NAME:latest" "${{ secrets.DOCKER_USERNAME }}/mlflow-model:latest"
          docker tag "$IMAGE_NAME:latest" "${{ secrets.DOCKER_USERNAME }}/mlflow-model:${{ github.run_id }}"
          docker push "${{ secrets.DOCKER_USERNAME }}/mlflow-model:latest"
          docker push "${{ secrets.DOCKER_USERNAME }}/mlflow-model:${{ github.run_id }}"
